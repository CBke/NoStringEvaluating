<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoStringEvaluating</name>
    </assembly>
    <members>
        <member name="T:NoStringEvaluating.Contract.IFormulaCache">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaCache.GetFormulaNodes(System.String)">
            <summary>
            Return cached formula nodes 
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFormulaChecker">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaChecker.CheckSyntax(System.String)">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaChecker.CheckSyntax(System.ReadOnlySpan{System.Char})">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFormulaParser">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.IFormulaParser.FunctionsReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaParser.Parse(System.String)">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaParser.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFunctionReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.AddFunction(NoStringEvaluating.Functions.Base.IFunction,System.Boolean)">
            <summary>
            Add function
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.NoStringFunctionException">if exists</exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.RemoveFunction(System.String)">
            <summary>
            Remove function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.TryProceedFunction(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read function name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.INoStringEvaluator">
            <summary>
            Math expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String,System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.Variables.IVariable">
            <summary>
            Variable model
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.Variables.IVariable.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.Variables.IVariable.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.Variables.IVariablesContainer">
            <summary>
            Container with variables
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.Variables.IVariablesContainer.AddOrUpdate(System.String,System.Double)">
            <summary>
            Add or update variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.Variables.IVariablesContainer.GetValue(System.String)">
            <summary>
            Return variable's value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Exceptions.NoStringFunctionException">
            <summary>
            Raises when function exception
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Exceptions.NoStringFunctionException.#ctor(System.String)">
            <summary>
            Raises when function exception
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions">
            <summary>
            NoStringEvaluator registrar
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.AddNoStringEvaluator(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{NoStringEvaluating.NoStringEvaluatorOptions})">
            <summary>
            Add NoString math evaluator
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Base.IFunction">
            <summary>
            Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Base.IFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Base.IFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.AndFunction">
            <summary>
            Function - add
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.AndFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.AndFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IffFunction">
            <summary>
            Function - iff
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IffFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IffFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IfFunction">
            <summary>
            Function - if
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IfFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IfFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IsnanFunction">
            <summary>
            Function - isNaN
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IsnanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IsnanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.NotFunction">
            <summary>
            Function - not
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.NotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.NotFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.OrFunction">
            <summary>
            Function - or
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.OrFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.OrFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.AbsFunction">
            <summary>
            Function - abs
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AbsFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.AbsFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.AddFunction">
            <summary>
            Function - add
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AddFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.AddFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.CeilFunction">
            <summary>
            Function - ceil
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.CeilFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.CeilFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FactFunction">
            <summary>
            Function - fact
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FactFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FactFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FibFunction">
            <summary>
            Function - fib
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FibFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FibFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FloorFunction">
            <summary>
            Function - floor
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FloorFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FloorFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.GcdFunction">
            <summary>
            Function - gcd
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.GcdFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.GcdFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LcmFunction">
            <summary>
            Function - lcm
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LcmFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LcmFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LnFunction">
            <summary>
            Function - ln
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LnFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LnFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Log10Function">
            <summary>
            Function - log10
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log10Function.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Log10Function.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Log2Function">
            <summary>
            Function - log2
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log2Function.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Log2Function.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LogFunction">
            <summary>
            Function - log
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LogFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LogFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MaxFunction">
            <summary>
            Function - max
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MaxFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MaxFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MeanFunction">
            <summary>
            Function - mean
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MeanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MeanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MinFunction">
            <summary>
            Function - min
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MinFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.ModFunction">
            <summary>
            Function - mod
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.ModFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.ModFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MultiFunction">
            <summary>
            Function - multi
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MultiFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MultiFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SgnFunction">
            <summary>
            Function - sgn
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SgnFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SgnFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SignFunction">
            <summary>
            Function - sign
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SignFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SignFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SqrtFunction">
            <summary>
            Function - sqrt
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SqrtFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SqrtFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction">
            <summary>
            Function - acosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction">
            <summary>
            Function - acsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction">
            <summary>
            Function - arccsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction">
            <summary>
            Function - arcosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction">
            <summary>
            Function - arcsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction">
            <summary>
            Function - cosec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction">
            <summary>
            Function - cosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction">
            <summary>
            Function - csc
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction">
            <summary>
            Function - csch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction">
            <summary>
            Function - acos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction">
            <summary>
            Function - acosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction">
            <summary>
            Function - arccos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction">
            <summary>
            Function - arccosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction">
            <summary>
            Function - arcos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction">
            <summary>
            Function - arcosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction">
            <summary>
            Function - cos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate va;ue
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction">
            <summary>
            Function - cosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction">
            <summary>
            Function - acot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction">
            <summary>
            Function - acoth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction">
            <summary>
            Function - actan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction">
            <summary>
            Function - actanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction">
            <summary>
            Function - actg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction">
            <summary>
            Function - actgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction">
            <summary>
            Function - arccot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction">
            <summary>
            Function - arccoth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction">
            <summary>
            Function - arcctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction">
            <summary>
            Function - arcctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction">
            <summary>
            Function - arcctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction">
            <summary>
            Function - arcctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction">
            <summary>
            Function - cot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction">
            <summary>
            Function - coth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction">
            <summary>
            Function - ctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction">
            <summary>
            Function - ctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction">
            <summary>
            Function - ctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction">
            <summary>
            Function - ctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction">
            <summary>
            Function - deg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction">
            <summary>
            Function - exp
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction">
            <summary>
            Function - rad
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction">
            <summary>
            Function - arcsec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction">
            <summary>
            Function - arcsech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction">
            <summary>
            Function - arsech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction">
            <summary>
            Function - asech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction">
            <summary>
            Function - sec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction">
            <summary>
            Function - sech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction">
            <summary>
            Function - arcsin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction">
            <summary>
            Function - arcsinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction">
            <summary>
            Function - arsin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction">
            <summary>
            Function - arsinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction">
            <summary>
            Function - asin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction">
            <summary>
            Function - asinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction">
            <summary>
            Function - sin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction">
            <summary>
            Function - sinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction">
            <summary>
            Function - arctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction">
            <summary>
            Function - arctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction">
            <summary>
            Function - arctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction">
            <summary>
            Function - arctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction">
            <summary>
            Function - atan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction">
            <summary>
            Function - atanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction">
            <summary>
            Function - atg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction">
            <summary>
            Function - atgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction">
            <summary>
            Function - tan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction">
            <summary>
            Function - tanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction">
            <summary>
            Function - tg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction">
            <summary>
            Function - tgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction.Execute(System.Collections.Generic.List{System.Double})">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Bracket">
            <summary>
            Bracket enum
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.CheckFormulaResult">
            <summary>
            Syntax checking result
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.CheckFormulaResult.Messages">
            <summary>
            Mistakes
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.CheckFormulaResult.Ok">
            <summary>
            Is checking OK
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.CheckFormulaResult.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Syntax checking result
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.CheckFormulaResult.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.CheckFormulaResult.op_Implicit(NoStringEvaluating.Models.CheckFormulaResult)~System.Boolean">
            <summary>
            Cast to bool
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.Dot">
            <summary>
            .
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.DotComma">
            <summary>
            . or ,
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FunctionChar">
            <summary>
            Chars used by function
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FunctionChar.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FunctionChar.Semicolon">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Operator">
            <summary>
            Operators
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Plus">
            <summary>
            +
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Minus">
            <summary>
            -
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Power">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Less">
            <summary>
            Less
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.LessEqual">
            <summary>
            Less or equal
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.More">
            <summary>
            More
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.MoreEqual">
            <summary>
            More or equal
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.NotEqual">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.Base.IFormulaNode">
            <summary>
            Formula node
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.BracketNode">
            <summary>
            Formula node - Bracket
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.BracketNode.Bracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BracketNode.#ctor(NoStringEvaluating.Models.Bracket)">
            <summary>
            Formula node - bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BracketNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.Common.FormulaNodes">
            <summary>
            Formula nodes
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.Common.FormulaNodes.Nodes">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.Common.FormulaNodes.#ctor(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode})">
            <summary>
            Formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.Common.FormulaNodes.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionCharNode">
            <summary>
            Formula node - FunctionChar
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionCharNode.FunctionChar">
            <summary>
            FunctionChar
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionCharNode.#ctor(NoStringEvaluating.Models.FunctionChar)">
            <summary>
            Formula node - FunctionChar
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionCharNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionNode">
            <summary>
            Formula node - Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionNode.Function">
            <summary>
            Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionNode.IsNegative">
            <summary>
            Has unary minus
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionNode.#ctor(NoStringEvaluating.Functions.Base.IFunction,System.Boolean)">
            <summary>
            Formula node - Function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionWrapperNode">
            <summary>
            Formula node - Function wrapper
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionWrapperNode.FunctionNode">
            <summary>
            Function node
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionWrapperNode.FunctionArgumentNodes">
            <summary>
            Function arguments
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionWrapperNode.#ctor(NoStringEvaluating.Nodes.FunctionNode)">
            <summary>
            Formula node - Function wrapper
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionWrapperNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.OperatorNode">
            <summary>
            Formula node - Operator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.OperatorNode.OperatorKey">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.OperatorNode.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.OperatorNode.#ctor(NoStringEvaluating.Models.Operator)">
            <summary>
            Formula node - Operator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.OperatorNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.ValueNode">
            <summary>
            Formula node - Value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.ValueNode.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.ValueNode.#ctor(System.Double)">
            <summary>
            Formula node - Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.ValueNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.VariableNode">
            <summary>
            Formula node - Variable
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.VariableNode.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.VariableNode.IsNegative">
            <summary>
            Has unary minus
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.VariableNode.#ctor(System.String,System.Boolean)">
            <summary>
            Formula node - Variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.VariableNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluator">
            <summary>
            Math expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.#ctor(Microsoft.Extensions.ObjectPool.ObjectPool{System.Collections.Generic.Stack{System.Double}},Microsoft.Extensions.ObjectPool.ObjectPool{System.Collections.Generic.List{System.Double}},NoStringEvaluating.Contract.IFormulaCache)">
            <summary>
            Math expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String,System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,System.Double})">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluatorConstants">
            <summary>
            Global constants
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorConstants.FloatingTolerance">
            <summary>
            Floating tolerance for understanding Zero number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorConstants.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorConstants.#cctor">
            <summary>
            Global constants
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluatorOptions">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.FloatingTolerance">
            <summary>
            Floating tolerance for understanding Zero number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.#ctor">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.UpdateConstants">
            <summary>
            Update constants <see cref="T:NoStringEvaluating.NoStringEvaluatorConstants"/>
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringFunctionsInitializer">
            <summary>
            Add functions to reader from your assembly
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringFunctionsInitializer.InitializeFunctions(NoStringEvaluating.Contract.IFunctionReader,System.Type,System.Boolean)">
            <summary>
            Initialize functions from assembly
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.BorderCounter`1">
            <summary>
            Border counter
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.BorderCounter`1.Count">
            <summary>
            Border count
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BorderCounter`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Border counter
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BorderCounter`1.Proceed(`0)">
            <summary>
            Proceed border
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.BracketCounters">
            <summary>
            Contains bracket counters
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.#ctor">
            <summary>
            Contains bracket counters
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.CreateNewCounter">
            <summary>
            Create new counter
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.Proceed(NoStringEvaluating.Nodes.BracketNode)">
            <summary>
            Return true, if bracket area is closed
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Cache.FormulaCache">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Cache.FormulaCache.#ctor(NoStringEvaluating.Contract.IFormulaParser)">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Cache.FormulaCache.GetFormulaNodes(System.String)">
            <summary>
            Return cached formula nodes 
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Checking.FormulaChecker">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.#ctor(NoStringEvaluating.Contract.IFunctionReader)">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.CheckSyntax(System.String)">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.CheckSyntax(System.ReadOnlySpan{System.Char})">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.IndexWatcher">
            <summary>
            Word index tracker
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.StartIndex">
            <summary>
            Start word index
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.Length">
            <summary>
            Word length
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.InProcess">
            <summary>
            Has start index
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.IndexWatcher.Remember(System.Int32)">
            <summary>
            Remember index
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.NameBuilder">
            <summary>
            Name builder
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.ExpectedName">
            <summary>
            Expected name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.IsFinished">
            <summary>
            Is finished
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.#ctor(System.String)">
            <summary>
            Name builder
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.TryRemember(System.Char)">
            <summary>
            Try remembed char
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.Reset(System.String)">
            <summary>
            Reset name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.FormulaParser">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.Parsing.FormulaParser.FunctionsReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.#ctor(NoStringEvaluating.Contract.IFunctionReader)">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.Parse(System.String)">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader">
            <summary>
            Bracket reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader.TryProceedOpenBracket(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},NoStringEvaluating.Services.BracketCounters,System.Int32@)">
            <summary>
            Read open bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader.TryProceedCloseBracket(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},NoStringEvaluating.Services.BracketCounters,System.Int32@)">
            <summary>
            Read close bracket
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionCharReader">
            <summary>
            Read function's char
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionCharReader.TryProceedFunctionChar(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.Char)">
            <summary>
            Read function's char
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.#ctor">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.AddFunction(NoStringEvaluating.Functions.Base.IFunction,System.Boolean)">
            <summary>
            Add function
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.NoStringFunctionException">if exists</exception>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.RemoveFunction(System.String)">
            <summary>
            Remove function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.TryProceedFunction(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read function name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.NumberReader">
            <summary>
            Number reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.NumberReader.TryProceedNumber(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read number
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.OperatorReader">
            <summary>
            Operator reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.OperatorReader.TryProceedOperator(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read operator
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader">
            <summary>
            Reader for unary minus
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader.ReadUnaryMinus(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32,System.Boolean@)">
            <summary>
            Read unary minus and return next index
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader.TryProceedUnaryMinus(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.Char,System.Boolean@)">
            <summary>
            Read unary minus
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader">
            <summary>
            Variable reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader.TryProceedBorderedVariable(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader.TryProceedSimpleVariable(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read variable
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.PolishNotationService">
            <summary>
            Reverse Polish notation
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.PolishNotationService.GetReversedNodes(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.IFormulaNode})">
            <summary>
            Return reversed nodes
            </summary>
        </member>
    </members>
</doc>
